#!/usr/bin/env python

"""Copyright (c) 2017, Annika Wierichs, RWTH Aachen University

All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
   * Neither the name of the University nor the names of its contributors
     may be used to endorse or promote products derived from this
     software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This script expects a text file containing function prototypes as input
(SRC_PATH). It generates the following C code snippets for each individual given
function in the input file. Todo notes are inserted whereever more work is
required.

1. The definition of a struct that contains all parameters and the return value
of a given function.
Required in: ./kernel/ibv.c

  Example:
  typedef struct {
      // Parameters:
      struct ibv_mr * mr;
      int flags;
      struct ibv_pd * pd;
      // Return value:
      int ret;
  } __attribute__((packed)) uhyve_ibv_rereg_mr_t;

2. The definition of the kernel space function that sends a KVM exit IO to
uhyve.
Required in: ./kernel/ibv.c

  Example:
  int ibv_rereg_mr(struct ibv_mr * mr, int flags, struct ibv_pd * pd) {
      uhyve_ibv_rereg_mr_t uhyve_args;
      uhyve_args->mr = (struct ibv_mr *) virt_to_phys((size_t) mr);
      uhyve_args->flags = flags;
      uhyve_args->pd = (struct ibv_pd *) virt_to_phys((size_t) pd);

      uhyve_send(UHYVE_PORT_IBV_REREG_MR, (unsigned) virt_to_phys((size_t) &uhyve_args));

      return uhyve_args.ret;
  }

3. TODO The switch-case that catches the KVM exit IO sent to uhyve by the kernel.
Required in: ./tool/uhyve.c

  Example:
  case UHYVE_PORT_IBV_REREG_MR: {
    unsigned data = *((unsigned*)((size_t)run+run->io.data_offset));
    uhyve_ibv_rereg_mr_t * args = (uhyve_ibv_rereg_mr_t *) (guest_mem + data);

    int host_ret = ibv_rereg_mr(guest_mem+(size_t)args->mr, flags, guest_mem+(size_t)args->pd);
    args->ret = host_ret;
    break;
  }

The script also generates an enum mapping all functions to KVM exit IO port
names and numbers.
Required in: ./tool/uhyve-ibv.h

  Example:
  typedef enum {
    UHYVE_PORT_IBV_WC_STATUS_STR = 0x510,
    UHYVE_PORT_IBV_RATE_TO_MULT = 0x511,
    UHYVE_PORT_MULT_TO_IBV_RATE = 0x512,
    // ...
  } uhyve_ibv_t;
"""

from __future__ import print_function
from parser import generate_struct_conversions


# Path of the input file containing function prototypes.
SRC_PATH = "function-prototypes-0.txt"

# Paths of the files that are generated by the script.
IBV_GEN_PATH = "GEN-kernel-ibv.c"
UHYVE_CASES_GEN_PATH = "GEN-tools-uhyve.c"
UHYVE_IBV_HEADER_GEN_PATH = "GEN-tools-uhyve-ibv-ports.h"
INCLUDE_STDDEF_GEN_PATH = "GEN-include-hermit-stddef.h"
UHYVE_IBV_HEADER_STRUCTS_GEN_PATH = "GEN-tools-uhyve-ibv-structs.h"
UHYVE_HOST_FCNS_GEN_PATH = "GEN-tools-uhyve-ibv.c"
#  VERBS_HEADER_PATH = "verbs-0.h"

# Starting number of the sequence used for IBV ports.
PORT_NUMBER_START = 0x510

TABS = ["", "\t", "\t\t", "\t\t\t", "\t\t\t\t"]
NEWLINES = ["", "\n", "\n\n"]

class Type:
  def __init__(self, string):
    ts = string
    if (string[-1] is "*") and (string[-2] is not " "):
        ts = string[:-1] + " *"

    self.type_string     = ts
    self.type_components = ts.split(" ")

  def get_struct_name(self):
    name = ""
    if is_struct():
      name = self.type_components[1]
    return name

  def is_struct(self):
    return self.type_components[0] == "struct"

  def is_pointer(self):
    return self.type_components[-1] == "*"

  def is_void(self):
    return self.type_string == "void"


class FunctionParameter:
  def __init__(self, string):
    components = string.split(" ")
    type_string = " ".join(components[:-1])

    self.type = Type(type_string)
    self.name = components[-1]

  def get_full_expression:
    return self.type.type_string + " " + self.name

  def get_struct_name(self):
    return self.type.get_struct_name()

  def is_struct(self):
    return self.type.is_struct()

  def is_pointer(self):
    return self.type.is_pointer()


class FunctionPrototype:
  def __init__(self, string):
    parens_split = string.split("(")
    ret_and_name = parens_split[0].split(" ")
    all_params = parens_split[-1].split(")")[0]
    param_strings = all_params.split(",")

    self.parameters    = [FunctionParameter(p) for p in param_strings]
    self.ret           = Type(" ".join(ret_and_name[:-1]))
    self.function_name = ret_and_name[-1]

  def generate_args_struct(ret, function_name, params):
    """Generates the struct to hold a function's parameters and return value.

    Args:
    ret: Return type as string.
    function_name: Function name as string.
    params: Parameters as list of strings.

    Returns:
    Generated struct as string.
    """
    code = ""
    code = "typedef struct {\n"

    if self.get_num_parameters() > 0:
      code += "\t// Parameters:\n"
      for param in self.parameters:
        code += "\t{0};\n".format(param.get_full_expression())

    if not self.ret.is_void():
      code += "\t// Return value:\n"
      code += "\t{0} ret;\n".format(self.ret.type_string)

    code += "}} __attribute__((packed)) {0};\n\n".format( self.get_args_struct_name())

    return code

  def get_num_parameters(self):
    return len(self.parameters)

  def get_parameter_types(self):
    return [param.type.type_string for param in self.parameters]

  def get_port_name(self):
    return "UHYVE_PORT_" + self.function_name.upper()

  def get_args_struct_name(self):
    return "uhyve_{0}_t".format(self.function_name)



# -----------------------------------------------------------------------------




#  def get_struct_name(function_name):
  #  """Returns the matching struct name for a given function name.
  #  """
  #  return "uhyve_{0}_t".format(function_name)


#  def parse_line(line):
  #  """Parses a line containing a function prototype.

  #  Args:
    #  line: Line of the following format:
          #  <return_type> <function_name>(<param_type> <param_name>, [...])

  #  Returns:
    #  [Return type, function name, parameters] as Tuple[string, string, list[string]]
  #  """
  #  parens_split = line.split("(")

  #  ret_and_name = parens_split[0].split(" ")
  #  all_params = parens_split[-1][:-1]

  #  ret = " ".join(ret_and_name[:-1])
  #  function_name = ret_and_name[-1]

  #  params = all_params.split(",")
  #  params[-1] = params[-1][:-1]

  #  return ret, function_name, params


#  def generate_struct(ret, function_name, params):
  #  """Generates the struct to hold a function's parameters and return value.

  #  Args:
    #  ret: Return type as string.
    #  function_name: Function name as string.
    #  params: Parameters as list of strings.

  #  Returns:
    #  Generated struct as string.
  #  """
  #  struct = "typedef struct {\n"
  #  if params:
    #  struct += "\t// Parameters:\n"
    #  for param in params:
      #  struct += "\t{0};\n".format(param)

  #  if ret is not "void":
    #  struct += "\t// Return value:\n"
    #  struct += "\t{0} ret;\n".format(ret)

  #  struct_name = get_struct_name(function_name)
  #  struct += "}} __attribute__((packed)) {0};\n\n".format(struct_name)

  #  return struct

# TODO: hier gehts weiter
def generate_kernel_function(ret, function_name, params):
  """Generates the kernel function that sends the KVM exit IO to uhyve.

  Args:
    ret: Return type as string.
    function_name: Function name as string.
    params: Parameters as list of strings.

  Returns:
    Generated function as string.
  """
  code = ""

  code = "{0} {1}({2}) {{\n".format(ret, function_name, ", ".join(params))

  # Create uhyve_args and define parameters
  struct_name = get_struct_name(function_name)
  code += "\t{0} ret_guest;\n".format(ret)
  code += "\t{0} uhyve_args;\n".format(struct_name)

  # TODO: Make a class for function prototypes
  for param in params:
    param_split = param.split(" ")
    param_type = " ".join(param_split[:-1])
    param_name = param_split[-1]

    # Define struct members according to their type.
    if "**" in param_type:
      code += "\t// TODO: Take care of ** parameter.\n"
    elif "*" in param_type:
      # TODO: char ptrs
      code += "\tuhyve_args.{0} = guest_to_host_{1}({2});\n".format(param_name, 
                                                                    param_split[1])
    else:
      code += "\tuhyve_args,{0} = {0};\n".format(param_name)

  # call uhyve_send() using the respective port ID.
  port_name = "UHYVE_PORT_" + function_name.upper()
  code += "\n\tuhyve_send({0}, (unsigned) virt_to_phys((size_t) " \
    "&uhyve_args));\n\n".format(port_name)

  for param in params:
    param_split = param.split(" ")
    param_type = " ".join(param_split[:-1])
    param_name = param_split[-1]

    # Define struct members according to their type.
    if "**" in param_type:
      code += "\t// TODO: Take care of ** parameter.\n"
    elif "*" in param_type:
      code += "\thost_to_guest_{0}({1}, GUEST);".format(param_split[1], param_name)

  if "**" in ret:
    code += "\t// TODO: Take care of ** parameter.\n"
  elif "*" in ret:
    code += "\tret_guest = host_to_guest_{0}(uhyve_args.ret, HOST)\n".format(ret[1])
  else:
    code += "\tret_guest = uhyve_args.ret;\n"
  
  code += "\n\treturn ret_guest;\n"
  code += "}\n\n\n"

  return code


# TODO: done
def generate_uhyve_cases(function_prototypes):
  """ Generates all switch-cases for uhyve's KVM exit IO.

  Returns:
    Generated switch-cases [string]
  """
  code = ""

  for pt in function_prototypes:
    name = pt.function_name
    port_name = pt.get_port_name()

    code += "{0}{1}case {2}:".format(NEWLINES[1], TABS[3], port_name)
    code += "{0}{1}call_{2}(run, guest_mem);".format(NEWLINES[1], TABS[4], name)
    code += "{0}{1}break;".format(NEWLINES[1], TABS[4])

  return code


# TODO: hier gehts weiter
def generate_uhyve_host_function(ret, function_name, params):
  """Generates a switch-case that catches a KVM exit IO for the given function in uhyve.

  Args:
    ret: Return type as string.
    function_name: Function name as string.
    params: Parameters as list of strings.

  Returns:
    Generated switch-case code as string.
  """

  def generate_host_call_parameter(param):
    """Generates the parameter for the host's function called from within uhyve.

    This distinguishes between pointers and non-pointers since pointers have to
    be converted to host memory addresses.
    Example for pointer:     guest_mem+(size_t)args->param
    Example for non-pointer: args->param

    Args:
      param: The parameter type and name as a single string.

    Returns:
      Generated parameter,
    """
    param_name = param.split(" ")[-1]
    if "**" in param:
      host_param = "/* TODO: param {0}*/".format(param_name)
    elif "*" in param:
      host_param = "guest_mem+(size_t)args->{0}".format(param_name)
    else:
      host_param = "{0}".format(param_name)

    return host_param

  struct_name = get_struct_name(function_name)

  fcn = "{0}void call_{1}(struct kvm_run * run, uint8_t * guest_mem) {{".format(NEWLINES[1], function_name)
  fcn += "{0}{1}unsigned data = *((unsigned*)((size_t)run+run->io.data_offset));".format(NEWLINES[1], TABS[1])
  fcn += "{0}{1}{2} * args = ({2} *) (guest_mem + data);".format(NEWLINES[1], TABS[1], struct_name)
  fcn += "{0}{1}{2} host_ret = {3}(".format(NEWLINES[2], TABS[1], ret, function_name)

  for param in params[:-1]:
    fcn += generate_host_call_parameter(param) + ", "
  else:
    fcn += generate_host_call_parameter(params[-1]) + ");"

  if "**" in ret:
    fcn += "{0}{1}// TODO: Take care of {2} return value.".format(NEWLINES[1], TABS[1], ret)
  elif "*" in ret:
    fcn += "{0}{1}memcpy(guest_mem+(size_t)args->ret, host_ret, sizeof(host_ret));".format(NEWLINES[1], TABS[1])
    fcn += "{0}{1}// TODO: Convert ptrs contained in return value.".format(NEWLINES[1], TABS[1])
    fcn += "{0}{1}// TODO: Delete host_ret data structure.".format(NEWLINES[1], TABS[1])
  else:
    fcn += "{0}{1}args->ret = host_ret;".format(NEWLINES[1], TABS[1])

  fcn += "{0}}}{0}".format(NEWLINES[1])

  return fcn


def generate_port_enum(function_names):
  """Generates the enum mapping KVM exit IO port names to port numbers.

  Args:
    function_names: All function names to be mapped to ports as list of strings.

  Returns:
    Generated complete enum.
  """
  port_enum = "typedef enum {"
  for num, function_name in enumerate(function_names, PORT_NUMBER_START):
    port_enum += "\n\tUHYVE_PORT_{0} = 0x{1},".format(function_name.upper(),
                                                    format(num, "X"))
  port_enum += "\n} uhyve_ibv_t;"

  return port_enum


def generate_port_macros(function_names):
  """Generates the compiler macros mapping KVM exit IO port names to port numbers.

  Args:
    function_names: All function names to be mapped to ports as list of strings.

  Returns:
    Generated list of compiler macros.
  """
  macros = ""
  for num, function_name in enumerate(function_names, PORT_NUMBER_START):
    macros += "\n#define UHYVE_PORT_{0} 0x{1}".format(function_name.upper(),
                                                       format(num, "X"))
  return macros


if __name__ == "__main__":
  """TODO: Doc
  """
  with open(SRC_PATH, "r") as f_src, \
       open(IBV_GEN_PATH, "w") as f_ibv, \
       open(UHYVE_HOST_FCNS_GEN_PATH, "w") as f_uhyve_host_fncs, \
       open(UHYVE_IBV_HEADER_STRUCTS_GEN_PATH, "w") as f_structs:
    function_names = []
    # Make this like the structure below.
    for line in f_src:
      ret, function_name, params = parse_line(line)
      function_names.append(function_name)

      struct = generate_struct(ret, function_name, params)
      f_ibv.write(struct)
      f_structs.write(struct)

      kernel_function = generate_kernel_function(ret, function_name, params)
      f_ibv.write(kernel_function)

      uhyve_fnc = generate_uhyve_host_function(ret, function_name, params)
      f_uhyve_host_fncs.write(uhyve_fnc)

  with open(UHYVE_IBV_HEADER_GEN_PATH, "w") as f_uhyve_ibv:
    port_enum = generate_port_enum(function_names)
    f_uhyve_ibv.write(port_enum)

  with open(UHYVE_CASES_GEN_PATH, "w") as f_cases:
    uhyve_cases = generate_uhyve_cases(function_names)
    f_cases.write(uhyve_cases)

  with open(INCLUDE_STDDEF_GEN_PATH, "w") as f_stddef:
    port_macros = generate_port_macros(function_names)
    f_stddef.write(port_macros)

  generate_struct_conversions()

